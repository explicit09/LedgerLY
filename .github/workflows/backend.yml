name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    strategy:
      matrix:
        node-version: [18.x]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ledgerly_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check code style
      run: |
        npm run lint
        npm run format:check

    - name: Run database migrations
      run: npm run migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ledgerly_test

    - name: Run tests
      run: npm test
      env:
        CI: true
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ledgerly_test
        JWT_SECRET: test-secret
        NODE_ENV: test

  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: Install dependencies
      working-directory: backend
      run: npm ci --production=false

    - name: Run migrations
      working-directory: backend
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
      run: npm run migrate

    - name: Build application
      working-directory: backend
      run: npm run build

    - name: Deploy to Staging
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_STAGING_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        appdir: backend
        env_file: .env.staging

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: Install dependencies
      working-directory: backend
      run: npm ci --production=false

    - name: Run migrations
      working-directory: backend
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: npm run migrate

    - name: Build application
      working-directory: backend
      run: npm run build

    - name: Deploy to Production
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_PRODUCTION_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        appdir: backend
        env_file: .env.production