# Task ID: 14
# Title: Security Enhancements and Data Encryption
# Status: done
# Dependencies: 1, 2, 3, 16, 17, 18, 19
# Priority: high
# Description: Implement additional security measures including data encryption, HTTPS enforcement, and security headers.
# Details:
1. Implement field-level encryption for sensitive data
2. Set up HTTPS with proper certificates
3. Configure security headers (CSP, HSTS, etc.)
4. Implement rate limiting for authentication endpoints
5. Add request validation middleware
6. Set up secure cookie configuration
7. Implement CSRF protection

Example security implementations:
```javascript
// HTTPS enforcement middleware
function requireHttps(req, res, next) {
  if (!req.secure && process.env.NODE_ENV !== 'development') {
    return res.redirect(`https://${req.headers.host}${req.url}`);
  }
  next();
}

// Security headers middleware
function securityHeaders(req, res, next) {
  // Content Security Policy
  res.setHeader(
    'Content-Security-Policy',
    "default-src 'self'; script-src 'self' https://cdn.plaid.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' https://api.plaid.com;"
  );
  
  // HTTP Strict Transport Security
  res.setHeader(
    'Strict-Transport-Security',
    'max-age=31536000; includeSubDomains'
  );
  
  // Prevent MIME type sniffing
  res.setHeader('X-Content-Type-Options', 'nosniff');
  
  // Prevent clickjacking
  res.setHeader('X-Frame-Options', 'DENY');
  
  // XSS protection
  res.setHeader('X-XSS-Protection', '1; mode=block');
  
  next();
}

// Rate limiting for auth endpoints
const rateLimit = require('express-rate-limit');

const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // 5 requests per window
  message: 'Too many login attempts, please try again later'
});

// Apply to auth routes
app.use('/api/auth/login', authLimiter);
app.use('/api/auth/register', authLimiter);

// Secure cookie configuration
app.use(session({
  secret: process.env.SESSION_SECRET,
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV !== 'development',
    sameSite: 'strict',
    maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
  },
  resave: false,
  saveUninitialized: false
}));
```

# Test Strategy:
1. Security scanning with tools like OWASP ZAP
2. Test HTTPS enforcement
3. Verify security headers are properly set
4. Test rate limiting functionality
5. Verify encryption/decryption of sensitive data
6. Test CSRF protection
7. Penetration testing for common vulnerabilities
8. Test secure cookie configuration
